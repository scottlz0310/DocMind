---
> タイトル:
DocMind — ローカルAI検索アプリ(PoC仕様書)

依頼内容:
ローカルPC上のPDF・Word・Excel・Markdown・テキストファイルを横断検索するデスクトップアプリ「DocMind」の完全ローカル版PoCを作成してください。
以下の要件を満たしてください：


---

1. 開発方針

完全ローカル実装：外部APIに依存しない

UIは最小限。ビジネスロジック優先

PySide6ベースのシンプルなGUI

初期段階はPoC(試作)として設計し、リリース段階でAI API連携を視野に入れる



---

2. 機能要件

1. ファイル全文検索

Whoosh または SQLiteベースの全文検索エンジンを使用

フォルダ指定でファイルをクロールし、インデックスを自動生成

更新時は差分インデックス対応



2. セマンティック検索

sentence-transformers の all-MiniLM-L6-v2 モデルを使用

質問文と文書をベクトル化して類似度検索を実現

Embeddingはローカルキャッシュに保存



3. 対応ファイル形式

PDF → PyMuPDFでテキスト抽出

Word → python-docx

Excel → openpyxl

Markdown → 直接解析

テキスト → 直接解析



4. 検索結果UI

左ペイン：フォルダツリー

中央ペイン：検索結果リスト(タイトル・スニペット・スコア)

右ペイン：プレビューエリア(全文 or 要約)



5. オフライン動作

Embeddingもモデルもローカルで完結

将来、API連携をオン/オフできる設計にする

---

3. 非機能要件

OS対応：Windows 10 / 11(優先)・macOS対応は将来検討

パフォーマンス：5万件程度の文書を5秒以内に検索

セキュリティ：インデックス・Embeddingはローカル保存

---

4. アーキテクチャ要件

言語：Python 3.11+

GUI：PySide6

検索：Whoosh / SQLite

ベクトル検索：sentence-transformers

データ構造：

documents.db → メタデータ・インデックス管理

embeddings.pkl → 文書ベクトルキャッシュ

---

5. documents

- 完全な仕様書
- 主要コンポーネントのクラス設計
- モジュール構造
- データフロー図
- PoC→製品版への移行時に必要な改善点リスト

---

補足：
初期段階ではUIの見た目よりも、検索精度とローカルでの性能を重視してください。
将来的にAPIで精度向上が可能なよう、アーキテクチャは拡張性のある設計にしてください。

---