[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "docmind"
version = "1.0.0"
description = "ローカルAI搭載ドキュメント検索デスクトップアプリケーション"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "DocMind Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Desktop Environment",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    # GUI フレームワーク
    "pyside6>=6.9.0",
    # 検索エンジン
    "whoosh>=2.7.4",
    # AI/ML - セマンティック検索
    "sentence-transformers>=2.7.0",
    # ドキュメント処理
    "pymupdf>=1.26.0",
    "python-docx>=1.2.0",
    "openpyxl>=3.1.0",
    # ファイルシステム監視
    "watchdog>=6.0.0",
    # ユーティリティ
    "chardet>=5.2.0",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=8.4.0",
    "pytest-cov>=6.3.0",
    "pytest-xdist>=3.8.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.3.0",
]
dev = [
    "docmind[test]",
    # コード品質
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    # セキュリティ
    "bandit>=1.8.0",
    "safety>=3.3.0",
]
build = [
    "pyinstaller>=6.0.0",
    "hatchling>=1.25.0",
]
security = [
    "bandit>=1.8.0",
    "safety>=3.3.0",
]

[project.scripts]
docmind = "main:main"

[project.urls]
Homepage = "https://github.com/docmind/docmind"
Repository = "https://github.com/docmind/docmind"
Issues = "https://github.com/docmind/docmind/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.wheel.sources]
"src" = ""

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.hatch.metadata]
allow-direct-references = true

# uv設定
[tool.uv]
dev-dependencies = [
    "docmind[dev]"
]

[tool.uv.workspace]
members = ["."]

# pytest設定
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-v",
    "-n", "auto",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--timeout=60",
    "--timeout-method=thread",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "gui: GUI tests requiring display",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*QApplication.*:UserWarning",
    "ignore::UserWarning",
]

# カバレッジ設定
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true

omit = [
    # テスト関連
    "*/tests/*",
    "*/test_*",
    # ビルド・キャッシュ
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
    # エントリポイント
    "main.py",
    "test_entry.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
precision = 1

# カバレッジ除外行
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "def main\\(\\):",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Ruff設定
[tool.ruff]
target-version = "py313"
line-length = 120  # 現代的な標準(88→120に変更)
exclude = [
    "archive/",
    "scripts/archive/",
]

[tool.ruff.lint]
# 品質ルール準拠の推奨ルールセット
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort (import order)
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # mccabe complexity
    "UP",  # pyupgrade
    "T20", # flake8-print (品質ルールでprint禁止)
    "N",   # pep8-naming
    "ERA", # eradicate (commented code)
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex (段階的に有効化)
    "B017",   # pytest.raises(Exception) is too broad
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "N806",   # variable in function should be lowercase (一時的に緩和)
    "ERA001", # eradicate commented code (開発中は将来参考のため許可)
    # E501は意図的に有効化(行長制限120文字)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow unused imports and star imports
"tests/*" = ["T20", "F841", "S101", "PLR2004"]  # Allow print, unused vars, assert, magic values in tests
"scripts/*" = ["T20", "PLR2004"]  # Allow print and magic values in scripts
"main.py" = ["T20"]  # Allow print in entry point

# isort設定 (品質ルール準拠)
[tool.ruff.lint.isort]
known-first-party = ["docmind"]
known-third-party = ["PySide6", "whoosh", "sentence_transformers", "fitz", "docx", "openpyxl", "watchdog"]
split-on-trailing-comma = true
force-single-line = false
force-sort-within-sections = true
combine-as-imports = true

[tool.ruff.format]
# 品質ルール準拠の詳細設定
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
# Docstring formatting
docstring-code-format = true
docstring-code-line-length = 88  # Docstring内コードは88文字制限
# Preview features for better formatting
preview = true

# MyPy設定
[tool.mypy]
python_version = "3.13"
# 基本設定
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
strict_optional = true

# 品質ルール準拠の推奨設定
warn_unused_ignores = true
warn_redundant_casts = true
no_implicit_optional = true
strict_equality = true

# 段階的厳格化(現在はprototype段階)
disallow_untyped_defs = false
disallow_any_generics = false
# staging段階で有効化予定:
# disallow_untyped_defs = true
# production段階で有効化予定:
# disallow_any_generics = true

# モジュール別設定
[[tool.mypy.overrides]]
module = [
    "sentence_transformers.*",
    "whoosh.*",
    "fitz.*",
    "docx.*",
    "openpyxl.*",
    "watchdog.*",
    "chardet.*",
    "psutil.*",
]
ignore_missing_imports = true

# テストファイルは緩いチェック
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

# エントリポイントは除外
[[tool.mypy.overrides]]
module = "main"
ignore_errors = true

# Bandit設定
[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv"]
skips = ["B101", "B601"]

# Safety設定
[tool.safety]
ignore = []
full_report = true