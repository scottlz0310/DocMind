name: リリース

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.11'  # 安定性のため3.11を使用、3.13は将来対応予定

jobs:
  # ドキュメント整合性チェック
  documentation-check:
    name: ドキュメント整合性チェック
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
    
    - name: ドキュメント整合性チェック
      shell: bash
      run: |
        echo "ドキュメント整合性チェック開始"
        
        # バージョン整合性チェック
        tag="${{ github.ref_name }}"
        version="${tag#v}"
        echo "リリースバージョン: $version"
        
        # pyproject.tomlのバージョンチェック
        pyproject_version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        if [ "$pyproject_version" != "$version" ]; then
          echo "エラー: pyproject.tomlのバージョン($pyproject_version)がタグ($version)と一致しません"
          exit 1
        fi
        echo "pyproject.tomlバージョン確認: $pyproject_version"
        
        # version.txtのバージョンチェック
        if [ -f version.txt ]; then
          version_txt=$(cat version.txt | tr -d '\n\r')
          if [ "$version_txt" != "$version" ]; then
            echo "エラー: version.txtのバージョン($version_txt)がタグ($version)と一致しません"
            exit 1
          fi
        fi
        
        # 必須ドキュメントファイルの存在チェック
        required_docs=(
          "README.md"
          "docs/FEATURES.md" 
          "docs/RELEASE_NOTES.md"
          "docs/USER_MANUAL.md"
          "docs/TROUBLESHOOTING_GUIDE.md"
          "LICENSE"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "エラー: 必須ドキュメント $doc が見つかりません"
            exit 1
          fi
        done
        
        # RELEASE_NOTES.mdに現在のバージョンが記載されているかチェック
        if ! grep -q "バージョン $version\|Version $version\|v$version" docs/RELEASE_NOTES.md; then
          echo "エラー: docs/RELEASE_NOTES.mdにバージョン $version の記載がありません"
          exit 1
        fi
        
        # README.mdのバージョン参照チェック
        if ! grep -q "$version" README.md; then
          echo "警告: README.mdにバージョン $version の記載がありません"
        fi
        
        echo "ドキュメント整合性チェック完了"

  # 品質ゲートチェック
  quality-gate:
    name: 品質ゲートチェック
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [documentation-check]
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Qt依存関係のセットアップ
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libegl1 libxkbcommon-x11-0 libxcb-xinerama0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,security,performance]
    
    - name: コード品質チェック
      run: |
        echo "コード品質チェック実行"
        
        # 構文チェック
        python -m py_compile main.py
        find src -name "*.py" -exec python -m py_compile {} \;
        
        # 型チェック
        mypy src/ --ignore-missing-imports
        
        # コードスタイルチェック
        black --check --diff src/ tests/
        isort --check-only --diff src/ tests/
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503,E501
        
        # セキュリティチェック
        mkdir -p reports
        bandit -r src/ -f json -o reports/bandit-report.json || true
        safety check --json --output reports/safety-report.json || true
        
        echo "コード品質チェック完了"
    
    - name: テスト実行
      run: |
        echo "テスト実行開始"
        
        # 全テスト実行（CI.ymlと同じ設定）
        pytest tests/ -v --tb=short \
          --cov=src \
          --cov-report=xml:reports/coverage.xml \
          --cov-report=term-missing \
          --junit-xml=reports/test-results.xml \
          --maxfail=3 --timeout=120
        
        # カバレッジレポート生成（リリース用は閾値チェックなし）
        coverage report
        
        echo "テスト実行完了"
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
        QT_LOGGING_RULES: "*.debug=false"
    
    - name: 品質メトリクス確認
      run: |
        echo "品質メトリクス確認"
        
        # ファイルサイズチェック（1000行以下）
        find src -name "*.py" -exec wc -l {} + | grep -v "total" | awk '$1 > 1000 {print "警告: " $2 " が1000行を超えています (" $1 "行)"; exit_code=1} END {exit exit_code}'
        
        # 循環依存チェック
        python -c "
        import ast
        import os
        from collections import defaultdict
        
        def check_circular_imports():
            imports = defaultdict(set)
            for root, dirs, files in os.walk('src'):
                for file in files:
                    if file.endswith('.py'):
                        filepath = os.path.join(root, file)
                        with open(filepath, 'r', encoding='utf-8') as f:
                            try:
                                tree = ast.parse(f.read())
                                module = filepath.replace('src/', '').replace('/', '.').replace('.py', '')
                                for node in ast.walk(tree):
                                    if isinstance(node, ast.Import):
                                        for alias in node.names:
                                            if alias.name.startswith('src.'):
                                                imports[module].add(alias.name.replace('src.', ''))
                                    elif isinstance(node, ast.ImportFrom):
                                        if node.module and node.module.startswith('src.'):
                                            imports[module].add(node.module.replace('src.', ''))
                            except:
                                pass
            
            # 簡単な循環依存チェック
            for module, deps in imports.items():
                for dep in deps:
                    if module in imports.get(dep, set()):
                        print(f'警告: 循環依存を検出: {module} <-> {dep}')
        
        check_circular_imports()
        "
        
        echo "品質メトリクス確認完了"
    
    - name: 品質レポートのアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: reports/

  # ビルドとテスト
  build-and-test:
    name: ビルドとテスト
    runs-on: windows-latest
    timeout-minutes: 60
    needs: [quality-gate]
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .[build]
    
    - name: アプリケーションビルド
      run: |
        echo "アプリケーションビルド開始"
        cd build_scripts
        python build_windows.py
        echo "アプリケーションビルド完了"
    
    - name: ビルド成果物の確認
      run: |
        echo "ビルド成果物の確認"
        
        # インストーラーファイルの存在確認
        if (Test-Path "installer/DocMind_Setup_v${{ github.ref_name }}.exe") {
          $fileSize = (Get-Item "installer/DocMind_Setup_v${{ github.ref_name }}.exe").Length
          echo "インストーラーサイズ: $($fileSize / 1MB) MB"
          
          if ($fileSize -lt 50MB) {
            echo "警告: インストーラーサイズが小さすぎます"
            exit 1
          }
        } else {
          echo "エラー: インストーラーファイルが見つかりません"
          exit 1
        }
    

    
    - name: ビルド成果物のアップロード
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: installer/DocMind_Setup_v${{ github.ref_name }}.exe

  # リリース作成
  create-release:
    name: リリース作成
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-and-test]
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
    
    - name: ビルド成果物のダウンロード
      uses: actions/download-artifact@v4
      with:
        name: windows-installer
        path: ./artifacts/
    
    - name: リリースノートの準備
      run: |
        echo "リリースノートの準備"
        
        # docs/RELEASE_NOTES.mdから該当バージョンの内容を抽出
        version="${{ github.ref_name }}"
        version_clean="${version#v}"
        
        # リリースノートの抽出（簡易版）
        awk "/## バージョン $version_clean/,/## バージョン|$/" docs/RELEASE_NOTES.md > release_notes_current.md
        
        # ファイルサイズ情報の追加
        installer_size=$(stat -c%s "artifacts/DocMind_Setup_v$version.exe" | awk '{print int($1/1024/1024) " MB"}')
        echo "" >> release_notes_current.md
        echo "### ダウンロード情報" >> release_notes_current.md
        echo "- **インストーラーサイズ**: $installer_size" >> release_notes_current.md
        echo "- **対応OS**: Windows 10/11 (64-bit)" >> release_notes_current.md
        echo "- **必要メモリ**: 4GB以上（8GB推奨）" >> release_notes_current.md
    
    - name: GitHubリリースの作成
      uses: softprops/action-gh-release@v1
      with:
        name: DocMind ${{ github.ref_name }}
        body_path: release_notes_current.md
        files: |
          artifacts/DocMind_Setup_v${{ github.ref_name }}.exe
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: リリース完了通知
      run: |
        echo "🎉 DocMind ${{ github.ref_name }} のリリースが完了しました！"
        echo "📦 ダウンロード: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

  # リリース後の検証
  post-release-validation:
    name: リリース後検証
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release]
    if: always()
    
    steps:
    - name: リリース状況の確認
      run: |
        echo "リリース状況の確認"
        
        # GitHub APIでリリース情報を取得
        release_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
        
        # リリースが正常に作成されたか確認
        if echo "$release_info" | grep -q '"draft": false'; then
          echo "✅ リリースが正常に公開されました"
        else
          echo "❌ リリースの公開に問題があります"
          exit 1
        fi
        
        # アセットが正常にアップロードされたか確認
        if echo "$release_info" | grep -q "DocMind_Setup_v${{ github.ref_name }}.exe"; then
          echo "✅ インストーラーが正常にアップロードされました"
        else
          echo "❌ インストーラーのアップロードに問題があります"
          exit 1
        fi
    
    - name: 次期開発準備の提案
      run: |
        echo "🚀 次期開発準備の提案"
        echo "1. 開発ブランチの作成を検討してください"
        echo "2. 次期バージョンの計画を立ててください"
        echo "3. ユーザーフィードバックの収集を開始してください"
        echo "4. 既知の問題の修正を計画してください"