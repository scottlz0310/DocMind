name: 包括的検証

on:
  # プッシュ時の検証
  push:
    branches: [ main, develop ]
  
  # プルリクエスト時の検証
  pull_request:
    branches: [ main, develop ]
  
  # 日次スケジュール実行（午前2時 JST）
  schedule:
    - cron: '0 17 * * *'  # UTC 17:00 = JST 02:00
  
  # 手動実行
  workflow_dispatch:
    inputs:
      validation_level:
        description: '検証レベル'
        required: true
        default: 'daily'
        type: choice
        options:
          - commit
          - daily
          - weekly
          - release
      enable_performance_tests:
        description: 'パフォーマンステストを有効化'
        required: false
        default: true
        type: boolean
      enable_security_scan:
        description: 'セキュリティスキャンを有効化'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  # 基本検証ジョブ
  basic-validation:
    name: 基本検証
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 完全な履歴を取得
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 依存関係のキャッシュ
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pypoetry
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
    
    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,security]
        pip install pytest pytest-cov pytest-xvfb bandit safety
    
    - name: コードフォーマット自動修正
      run: |
        pip install black isort flake8
        black src/ tests/
        isort src/ tests/
        
    - name: フォーマット結果をコミット
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || git commit -m "style: 自動コードフォーマット適用"
        
    - name: コードスタイルチェック
      run: |
        flake8 src/ tests/
    
    - name: 型チェック
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports || true
    
    - name: ユニットテスト実行
      run: |
        pytest tests/ -v --tb=short \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=test-results.xml
    
    - name: テスト結果のアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-basic
        path: |
          test-results.xml
          coverage.xml
          htmlcov/
    
    - name: カバレッジレポートの送信
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # セキュリティ検証ジョブ
  security-validation:
    name: セキュリティ検証
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name != 'pull_request' || github.event.inputs.enable_security_scan == 'true'
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: セキュリティツールのインストール
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
    
    - name: Banditセキュリティスキャン
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt || true
    
    - name: 依存関係脆弱性チェック
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Semgrepセキュリティスキャン
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
    
    - name: セキュリティレポートのアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # パフォーマンステストジョブ
  performance-validation:
    name: パフォーマンス検証
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event.inputs.enable_performance_tests == 'true'
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,performance]
        pip install pytest pytest-benchmark memory-profiler
    
    - name: パフォーマンステスト実行
      run: |
        pytest tests/ -m performance -v \
          --benchmark-json=benchmark-results.json \
          --benchmark-histogram=benchmark-histogram
    
    - name: メモリプロファイリング
      run: |
        python -m memory_profiler tests/validation_framework/run_performance_validation.py > memory-profile.txt || true
    
    - name: パフォーマンス結果のアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          benchmark-results.json
          benchmark-histogram.svg
          memory-profile.txt

  # 包括的検証ジョブ
  comprehensive-validation:
    name: 包括的検証
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [basic-validation]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        validation-level: 
          - ${{ github.event.inputs.validation_level || 'daily' }}
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: システム依存関係のインストール
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libegl1 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libfontconfig1 \
          libfreetype6
    
    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,security,performance]
        pip install pytest pytest-cov pytest-xvfb pytest-qt
        pip install bandit safety semgrep
    
    - name: 前回の結果ダウンロード
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: test-results-basic
        path: ./previous-results/
    
    - name: セキュリティレポートダウンロード
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: security-reports
        path: ./security-reports/
    
    - name: パフォーマンス結果ダウンロード
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: performance-results
        path: ./performance-results/
    
    - name: 包括的検証の実行
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: 'offscreen'
        VALIDATION_LEVEL: ${{ matrix.validation-level }}
      run: |
        # 仮想ディスプレイの開始
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
        # 包括的検証の実行
        python tests/validation_framework/run_comprehensive_validation.py \
          --level ${{ matrix.validation-level }} \
          --output-dir comprehensive_validation_results \
          --timeout 90 \
          --verbose
    
    - name: 品質ゲートチェック
      run: |
        python tests/validation_framework/quality_gate_manager.py \
          --coverage-file coverage.xml \
          --security-report security-reports/bandit-report.json \
          --performance-metrics performance-results/benchmark-results.json \
          --output-dir quality_gate_results
    
    - name: 検証結果のアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-validation-results-${{ matrix.validation-level }}
        path: |
          comprehensive_validation_results/
          quality_gate_results/
    
    - name: 検証レポートの生成
      if: always()
      run: |
        python tests/validation_framework/validation_report_generator.py \
          --input-dir comprehensive_validation_results \
          --output-file validation-report.html \
          --format html
    
    - name: レポートのアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-report-${{ matrix.validation-level }}
        path: validation-report.html

  # 結果通知ジョブ
  notification:
    name: 結果通知
    runs-on: ubuntu-latest
    needs: [basic-validation, security-validation, comprehensive-validation]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: 結果の集計
      id: aggregate
      run: |
        basic_result="${{ needs.basic-validation.result }}"
        security_result="${{ needs.security-validation.result }}"
        comprehensive_result="${{ needs.comprehensive-validation.result }}"
        
        if [[ "$basic_result" == "success" && "$security_result" == "success" && "$comprehensive_result" == "success" ]]; then
          echo "overall_result=success" >> $GITHUB_OUTPUT
          echo "status_emoji=✅" >> $GITHUB_OUTPUT
        else
          echo "overall_result=failure" >> $GITHUB_OUTPUT
          echo "status_emoji=❌" >> $GITHUB_OUTPUT
        fi
        
        echo "basic_result=$basic_result" >> $GITHUB_OUTPUT
        echo "security_result=$security_result" >> $GITHUB_OUTPUT
        echo "comprehensive_result=$comprehensive_result" >> $GITHUB_OUTPUT
    
    - name: Slack通知
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"${{ steps.aggregate.outputs.status_emoji }} DocMind 包括的検証結果\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*DocMind 包括的検証結果*\n全体結果: ${{ steps.aggregate.outputs.overall_result }}\"
                }
              },
              {
                \"type\": \"section\",
                \"fields\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*基本検証:* ${{ steps.aggregate.outputs.basic_result }}\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*セキュリティ検証:* ${{ steps.aggregate.outputs.security_result }}\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*包括的検証:* ${{ steps.aggregate.outputs.comprehensive_result }}\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*ブランチ:* ${{ github.ref_name }}\"
                  }
                ]
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"詳細を確認\"
                    },
                    \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              }
            ]
          }" \
          $SLACK_WEBHOOK_URL
    
    - name: メール通知
      if: steps.aggregate.outputs.overall_result == 'failure' && env.MAIL_SERVER != ''
      env:
        MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        MAIL_TO: ${{ secrets.MAIL_TO }}
      run: |
        python -c "
        import smtplib
        from email.mime.text import MimeText
        from email.mime.multipart import MimeMultipart
        import os
        
        msg = MimeMultipart()
        msg['From'] = os.environ['MAIL_USERNAME']
        msg['To'] = os.environ['MAIL_TO']
        msg['Subject'] = 'DocMind 包括的検証失敗通知'
        
        body = '''
        DocMind 包括的検証が失敗しました。
        
        詳細:
        - 基本検証: ${{ steps.aggregate.outputs.basic_result }}
        - セキュリティ検証: ${{ steps.aggregate.outputs.security_result }}
        - 包括的検証: ${{ steps.aggregate.outputs.comprehensive_result }}
        
        詳細な結果は以下のリンクから確認してください:
        ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        '''
        
        msg.attach(MimeText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(os.environ['MAIL_SERVER'], 587)
        server.starttls()
        server.login(os.environ['MAIL_USERNAME'], os.environ['MAIL_PASSWORD'])
        server.send_message(msg)
        server.quit()
        "

  # 週次詳細検証ジョブ
  weekly-validation:
    name: 週次詳細検証
    runs-on: ubuntu-latest
    timeout-minutes: 180
    if: github.event_name == 'schedule' && github.event.schedule == '0 17 * * 0'  # 日曜日のみ
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb pytest-qt
    
    - name: 週次包括的検証の実行
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: 'offscreen'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
        python tests/validation_framework/run_comprehensive_validation.py \
          --level weekly \
          --output-dir weekly_validation_results \
          --timeout 180 \
          --verbose
    
    - name: 週次レポートの生成
      run: |
        python tests/validation_framework/validation_report_generator.py \
          --input-dir weekly_validation_results \
          --output-file weekly-validation-report.html \
          --format html \
          --include-trends
    
    - name: 週次結果のアップロード
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: weekly-validation-results
        path: |
          weekly_validation_results/
          weekly-validation-report.html
        retention-days: 30